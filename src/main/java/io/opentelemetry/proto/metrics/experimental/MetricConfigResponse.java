// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/experimental/metrics_config_service.proto

package io.opentelemetry.proto.metrics.experimental;

/**
 * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse}
 */
public final class MetricConfigResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse)
    MetricConfigResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MetricConfigResponse.newBuilder() to construct.
  private MetricConfigResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MetricConfigResponse() {
    fingerprint_ = com.google.protobuf.ByteString.EMPTY;
    schedules_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new MetricConfigResponse();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private MetricConfigResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {

            fingerprint_ = input.readBytes();
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              schedules_ = new java.util.ArrayList<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule>();
              mutable_bitField0_ |= 0x00000001;
            }
            schedules_.add(
                input.readMessage(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.parser(), extensionRegistry));
            break;
          }
          case 24: {

            suggestedWaitTimeSec_ = input.readInt32();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        schedules_ = java.util.Collections.unmodifiableList(schedules_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.class, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Builder.class);
  }

  public interface ScheduleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> 
        getExclusionPatternsList();
    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern getExclusionPatterns(int index);
    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    int getExclusionPatternsCount();
    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    java.util.List<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> 
        getExclusionPatternsOrBuilderList();
    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder getExclusionPatternsOrBuilder(
        int index);

    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> 
        getInclusionPatternsList();
    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern getInclusionPatterns(int index);
    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    int getInclusionPatternsCount();
    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    java.util.List<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> 
        getInclusionPatternsOrBuilderList();
    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder getInclusionPatternsOrBuilder(
        int index);

    /**
     * <pre>
     * Describes the collection period for each metric in seconds.
     * A period of 0 means to not export.
     * </pre>
     *
     * <code>int32 period_sec = 3;</code>
     * @return The periodSec.
     */
    int getPeriodSec();
  }
  /**
   * <pre>
   * A Schedule is used to apply a particular scheduling configuration to
   * a metric. If a metric name matches a schedule's patterns, then the metric
   * adopts the configuration specified by the schedule.
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule}
   */
  public static final class Schedule extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
      ScheduleOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Schedule.newBuilder() to construct.
    private Schedule(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Schedule() {
      exclusionPatterns_ = java.util.Collections.emptyList();
      inclusionPatterns_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Schedule();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Schedule(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                exclusionPatterns_ = new java.util.ArrayList<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>();
                mutable_bitField0_ |= 0x00000001;
              }
              exclusionPatterns_.add(
                  input.readMessage(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.parser(), extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                inclusionPatterns_ = new java.util.ArrayList<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>();
                mutable_bitField0_ |= 0x00000002;
              }
              inclusionPatterns_.add(
                  input.readMessage(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.parser(), extensionRegistry));
              break;
            }
            case 24: {

              periodSec_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          exclusionPatterns_ = java.util.Collections.unmodifiableList(exclusionPatterns_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          inclusionPatterns_ = java.util.Collections.unmodifiableList(inclusionPatterns_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.class, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder.class);
    }

    public interface PatternOrBuilder extends
        // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * matches the metric name exactly
       * </pre>
       *
       * <code>string equals = 1;</code>
       * @return The equals.
       */
      java.lang.String getEquals();
      /**
       * <pre>
       * matches the metric name exactly
       * </pre>
       *
       * <code>string equals = 1;</code>
       * @return The bytes for equals.
       */
      com.google.protobuf.ByteString
          getEqualsBytes();

      /**
       * <pre>
       * prefix-matches the metric name
       * </pre>
       *
       * <code>string starts_with = 2;</code>
       * @return The startsWith.
       */
      java.lang.String getStartsWith();
      /**
       * <pre>
       * prefix-matches the metric name
       * </pre>
       *
       * <code>string starts_with = 2;</code>
       * @return The bytes for startsWith.
       */
      com.google.protobuf.ByteString
          getStartsWithBytes();

      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.MatchCase getMatchCase();
    }
    /**
     * <pre>
     * A light-weight pattern that can match 1 or more
     * metrics, for which this schedule will apply. The string is used to
     * match against metric names. It should not exceed 100k characters.
     * </pre>
     *
     * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern}
     */
    public static final class Pattern extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
        PatternOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Pattern.newBuilder() to construct.
      private Pattern(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Pattern() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Pattern();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Pattern(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();
                matchCase_ = 1;
                match_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                matchCase_ = 2;
                match_ = s;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.class, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder.class);
      }

      private int matchCase_ = 0;
      private java.lang.Object match_;
      public enum MatchCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        EQUALS(1),
        STARTS_WITH(2),
        MATCH_NOT_SET(0);
        private final int value;
        private MatchCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static MatchCase valueOf(int value) {
          return forNumber(value);
        }

        public static MatchCase forNumber(int value) {
          switch (value) {
            case 1: return EQUALS;
            case 2: return STARTS_WITH;
            case 0: return MATCH_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public MatchCase
      getMatchCase() {
        return MatchCase.forNumber(
            matchCase_);
      }

      public static final int EQUALS_FIELD_NUMBER = 1;
      /**
       * <pre>
       * matches the metric name exactly
       * </pre>
       *
       * <code>string equals = 1;</code>
       * @return The equals.
       */
      public java.lang.String getEquals() {
        java.lang.Object ref = "";
        if (matchCase_ == 1) {
          ref = match_;
        }
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (matchCase_ == 1) {
            match_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * matches the metric name exactly
       * </pre>
       *
       * <code>string equals = 1;</code>
       * @return The bytes for equals.
       */
      public com.google.protobuf.ByteString
          getEqualsBytes() {
        java.lang.Object ref = "";
        if (matchCase_ == 1) {
          ref = match_;
        }
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (matchCase_ == 1) {
            match_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int STARTS_WITH_FIELD_NUMBER = 2;
      /**
       * <pre>
       * prefix-matches the metric name
       * </pre>
       *
       * <code>string starts_with = 2;</code>
       * @return The startsWith.
       */
      public java.lang.String getStartsWith() {
        java.lang.Object ref = "";
        if (matchCase_ == 2) {
          ref = match_;
        }
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (matchCase_ == 2) {
            match_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * prefix-matches the metric name
       * </pre>
       *
       * <code>string starts_with = 2;</code>
       * @return The bytes for startsWith.
       */
      public com.google.protobuf.ByteString
          getStartsWithBytes() {
        java.lang.Object ref = "";
        if (matchCase_ == 2) {
          ref = match_;
        }
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (matchCase_ == 2) {
            match_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (matchCase_ == 1) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, match_);
        }
        if (matchCase_ == 2) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, match_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (matchCase_ == 1) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, match_);
        }
        if (matchCase_ == 2) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, match_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)) {
          return super.equals(obj);
        }
        io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern other = (io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern) obj;

        if (!getMatchCase().equals(other.getMatchCase())) return false;
        switch (matchCase_) {
          case 1:
            if (!getEquals()
                .equals(other.getEquals())) return false;
            break;
          case 2:
            if (!getStartsWith()
                .equals(other.getStartsWith())) return false;
            break;
          case 0:
          default:
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        switch (matchCase_) {
          case 1:
            hash = (37 * hash) + EQUALS_FIELD_NUMBER;
            hash = (53 * hash) + getEquals().hashCode();
            break;
          case 2:
            hash = (37 * hash) + STARTS_WITH_FIELD_NUMBER;
            hash = (53 * hash) + getStartsWith().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A light-weight pattern that can match 1 or more
       * metrics, for which this schedule will apply. The string is used to
       * match against metric names. It should not exceed 100k characters.
       * </pre>
       *
       * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.class, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder.class);
        }

        // Construct using io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          matchCase_ = 0;
          match_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_descriptor;
        }

        @java.lang.Override
        public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern getDefaultInstanceForType() {
          return io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.getDefaultInstance();
        }

        @java.lang.Override
        public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern build() {
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern buildPartial() {
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern result = new io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern(this);
          if (matchCase_ == 1) {
            result.match_ = match_;
          }
          if (matchCase_ == 2) {
            result.match_ = match_;
          }
          result.matchCase_ = matchCase_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern) {
            return mergeFrom((io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern other) {
          if (other == io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.getDefaultInstance()) return this;
          switch (other.getMatchCase()) {
            case EQUALS: {
              matchCase_ = 1;
              match_ = other.match_;
              onChanged();
              break;
            }
            case STARTS_WITH: {
              matchCase_ = 2;
              match_ = other.match_;
              onChanged();
              break;
            }
            case MATCH_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int matchCase_ = 0;
        private java.lang.Object match_;
        public MatchCase
            getMatchCase() {
          return MatchCase.forNumber(
              matchCase_);
        }

        public Builder clearMatch() {
          matchCase_ = 0;
          match_ = null;
          onChanged();
          return this;
        }


        /**
         * <pre>
         * matches the metric name exactly
         * </pre>
         *
         * <code>string equals = 1;</code>
         * @return The equals.
         */
        @java.lang.Override
        public java.lang.String getEquals() {
          java.lang.Object ref = "";
          if (matchCase_ == 1) {
            ref = match_;
          }
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (matchCase_ == 1) {
              match_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * matches the metric name exactly
         * </pre>
         *
         * <code>string equals = 1;</code>
         * @return The bytes for equals.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getEqualsBytes() {
          java.lang.Object ref = "";
          if (matchCase_ == 1) {
            ref = match_;
          }
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            if (matchCase_ == 1) {
              match_ = b;
            }
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * matches the metric name exactly
         * </pre>
         *
         * <code>string equals = 1;</code>
         * @param value The equals to set.
         * @return This builder for chaining.
         */
        public Builder setEquals(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  matchCase_ = 1;
          match_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * matches the metric name exactly
         * </pre>
         *
         * <code>string equals = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearEquals() {
          if (matchCase_ == 1) {
            matchCase_ = 0;
            match_ = null;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * matches the metric name exactly
         * </pre>
         *
         * <code>string equals = 1;</code>
         * @param value The bytes for equals to set.
         * @return This builder for chaining.
         */
        public Builder setEqualsBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          matchCase_ = 1;
          match_ = value;
          onChanged();
          return this;
        }

        /**
         * <pre>
         * prefix-matches the metric name
         * </pre>
         *
         * <code>string starts_with = 2;</code>
         * @return The startsWith.
         */
        @java.lang.Override
        public java.lang.String getStartsWith() {
          java.lang.Object ref = "";
          if (matchCase_ == 2) {
            ref = match_;
          }
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (matchCase_ == 2) {
              match_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * prefix-matches the metric name
         * </pre>
         *
         * <code>string starts_with = 2;</code>
         * @return The bytes for startsWith.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getStartsWithBytes() {
          java.lang.Object ref = "";
          if (matchCase_ == 2) {
            ref = match_;
          }
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            if (matchCase_ == 2) {
              match_ = b;
            }
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * prefix-matches the metric name
         * </pre>
         *
         * <code>string starts_with = 2;</code>
         * @param value The startsWith to set.
         * @return This builder for chaining.
         */
        public Builder setStartsWith(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  matchCase_ = 2;
          match_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * prefix-matches the metric name
         * </pre>
         *
         * <code>string starts_with = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearStartsWith() {
          if (matchCase_ == 2) {
            matchCase_ = 0;
            match_ = null;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * prefix-matches the metric name
         * </pre>
         *
         * <code>string starts_with = 2;</code>
         * @param value The bytes for startsWith to set.
         * @return This builder for chaining.
         */
        public Builder setStartsWithBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          matchCase_ = 2;
          match_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
      }

      // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
      private static final io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern();
      }

      public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Pattern>
          PARSER = new com.google.protobuf.AbstractParser<Pattern>() {
        @java.lang.Override
        public Pattern parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Pattern(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Pattern> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Pattern> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int EXCLUSION_PATTERNS_FIELD_NUMBER = 1;
    private java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> exclusionPatterns_;
    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> getExclusionPatternsList() {
      return exclusionPatterns_;
    }
    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> 
        getExclusionPatternsOrBuilderList() {
      return exclusionPatterns_;
    }
    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    @java.lang.Override
    public int getExclusionPatternsCount() {
      return exclusionPatterns_.size();
    }
    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    @java.lang.Override
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern getExclusionPatterns(int index) {
      return exclusionPatterns_.get(index);
    }
    /**
     * <pre>
     * Metrics with names that match a rule in the inclusion_patterns are
     * targeted by this schedule. Metrics that match the exclusion_patterns
     * are not targeted for this schedule, even if they match an inclusion
     * pattern.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
     */
    @java.lang.Override
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder getExclusionPatternsOrBuilder(
        int index) {
      return exclusionPatterns_.get(index);
    }

    public static final int INCLUSION_PATTERNS_FIELD_NUMBER = 2;
    private java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> inclusionPatterns_;
    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    @java.lang.Override
    public java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> getInclusionPatternsList() {
      return inclusionPatterns_;
    }
    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> 
        getInclusionPatternsOrBuilderList() {
      return inclusionPatterns_;
    }
    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    @java.lang.Override
    public int getInclusionPatternsCount() {
      return inclusionPatterns_.size();
    }
    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    @java.lang.Override
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern getInclusionPatterns(int index) {
      return inclusionPatterns_.get(index);
    }
    /**
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
     */
    @java.lang.Override
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder getInclusionPatternsOrBuilder(
        int index) {
      return inclusionPatterns_.get(index);
    }

    public static final int PERIOD_SEC_FIELD_NUMBER = 3;
    private int periodSec_;
    /**
     * <pre>
     * Describes the collection period for each metric in seconds.
     * A period of 0 means to not export.
     * </pre>
     *
     * <code>int32 period_sec = 3;</code>
     * @return The periodSec.
     */
    @java.lang.Override
    public int getPeriodSec() {
      return periodSec_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < exclusionPatterns_.size(); i++) {
        output.writeMessage(1, exclusionPatterns_.get(i));
      }
      for (int i = 0; i < inclusionPatterns_.size(); i++) {
        output.writeMessage(2, inclusionPatterns_.get(i));
      }
      if (periodSec_ != 0) {
        output.writeInt32(3, periodSec_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < exclusionPatterns_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, exclusionPatterns_.get(i));
      }
      for (int i = 0; i < inclusionPatterns_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, inclusionPatterns_.get(i));
      }
      if (periodSec_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, periodSec_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)) {
        return super.equals(obj);
      }
      io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule other = (io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule) obj;

      if (!getExclusionPatternsList()
          .equals(other.getExclusionPatternsList())) return false;
      if (!getInclusionPatternsList()
          .equals(other.getInclusionPatternsList())) return false;
      if (getPeriodSec()
          != other.getPeriodSec()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getExclusionPatternsCount() > 0) {
        hash = (37 * hash) + EXCLUSION_PATTERNS_FIELD_NUMBER;
        hash = (53 * hash) + getExclusionPatternsList().hashCode();
      }
      if (getInclusionPatternsCount() > 0) {
        hash = (37 * hash) + INCLUSION_PATTERNS_FIELD_NUMBER;
        hash = (53 * hash) + getInclusionPatternsList().hashCode();
      }
      hash = (37 * hash) + PERIOD_SEC_FIELD_NUMBER;
      hash = (53 * hash) + getPeriodSec();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A Schedule is used to apply a particular scheduling configuration to
     * a metric. If a metric name matches a schedule's patterns, then the metric
     * adopts the configuration specified by the schedule.
     * </pre>
     *
     * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
        io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.ScheduleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.class, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder.class);
      }

      // Construct using io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getExclusionPatternsFieldBuilder();
          getInclusionPatternsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (exclusionPatternsBuilder_ == null) {
          exclusionPatterns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          exclusionPatternsBuilder_.clear();
        }
        if (inclusionPatternsBuilder_ == null) {
          inclusionPatterns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          inclusionPatternsBuilder_.clear();
        }
        periodSec_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_descriptor;
      }

      @java.lang.Override
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule getDefaultInstanceForType() {
        return io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.getDefaultInstance();
      }

      @java.lang.Override
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule build() {
        io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule buildPartial() {
        io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule result = new io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule(this);
        int from_bitField0_ = bitField0_;
        if (exclusionPatternsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            exclusionPatterns_ = java.util.Collections.unmodifiableList(exclusionPatterns_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.exclusionPatterns_ = exclusionPatterns_;
        } else {
          result.exclusionPatterns_ = exclusionPatternsBuilder_.build();
        }
        if (inclusionPatternsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            inclusionPatterns_ = java.util.Collections.unmodifiableList(inclusionPatterns_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.inclusionPatterns_ = inclusionPatterns_;
        } else {
          result.inclusionPatterns_ = inclusionPatternsBuilder_.build();
        }
        result.periodSec_ = periodSec_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule) {
          return mergeFrom((io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule other) {
        if (other == io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.getDefaultInstance()) return this;
        if (exclusionPatternsBuilder_ == null) {
          if (!other.exclusionPatterns_.isEmpty()) {
            if (exclusionPatterns_.isEmpty()) {
              exclusionPatterns_ = other.exclusionPatterns_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureExclusionPatternsIsMutable();
              exclusionPatterns_.addAll(other.exclusionPatterns_);
            }
            onChanged();
          }
        } else {
          if (!other.exclusionPatterns_.isEmpty()) {
            if (exclusionPatternsBuilder_.isEmpty()) {
              exclusionPatternsBuilder_.dispose();
              exclusionPatternsBuilder_ = null;
              exclusionPatterns_ = other.exclusionPatterns_;
              bitField0_ = (bitField0_ & ~0x00000001);
              exclusionPatternsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExclusionPatternsFieldBuilder() : null;
            } else {
              exclusionPatternsBuilder_.addAllMessages(other.exclusionPatterns_);
            }
          }
        }
        if (inclusionPatternsBuilder_ == null) {
          if (!other.inclusionPatterns_.isEmpty()) {
            if (inclusionPatterns_.isEmpty()) {
              inclusionPatterns_ = other.inclusionPatterns_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureInclusionPatternsIsMutable();
              inclusionPatterns_.addAll(other.inclusionPatterns_);
            }
            onChanged();
          }
        } else {
          if (!other.inclusionPatterns_.isEmpty()) {
            if (inclusionPatternsBuilder_.isEmpty()) {
              inclusionPatternsBuilder_.dispose();
              inclusionPatternsBuilder_ = null;
              inclusionPatterns_ = other.inclusionPatterns_;
              bitField0_ = (bitField0_ & ~0x00000002);
              inclusionPatternsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInclusionPatternsFieldBuilder() : null;
            } else {
              inclusionPatternsBuilder_.addAllMessages(other.inclusionPatterns_);
            }
          }
        }
        if (other.getPeriodSec() != 0) {
          setPeriodSec(other.getPeriodSec());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> exclusionPatterns_ =
        java.util.Collections.emptyList();
      private void ensureExclusionPatternsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          exclusionPatterns_ = new java.util.ArrayList<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>(exclusionPatterns_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> exclusionPatternsBuilder_;

      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> getExclusionPatternsList() {
        if (exclusionPatternsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(exclusionPatterns_);
        } else {
          return exclusionPatternsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public int getExclusionPatternsCount() {
        if (exclusionPatternsBuilder_ == null) {
          return exclusionPatterns_.size();
        } else {
          return exclusionPatternsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern getExclusionPatterns(int index) {
        if (exclusionPatternsBuilder_ == null) {
          return exclusionPatterns_.get(index);
        } else {
          return exclusionPatternsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public Builder setExclusionPatterns(
          int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern value) {
        if (exclusionPatternsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExclusionPatternsIsMutable();
          exclusionPatterns_.set(index, value);
          onChanged();
        } else {
          exclusionPatternsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public Builder setExclusionPatterns(
          int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder builderForValue) {
        if (exclusionPatternsBuilder_ == null) {
          ensureExclusionPatternsIsMutable();
          exclusionPatterns_.set(index, builderForValue.build());
          onChanged();
        } else {
          exclusionPatternsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public Builder addExclusionPatterns(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern value) {
        if (exclusionPatternsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExclusionPatternsIsMutable();
          exclusionPatterns_.add(value);
          onChanged();
        } else {
          exclusionPatternsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public Builder addExclusionPatterns(
          int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern value) {
        if (exclusionPatternsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExclusionPatternsIsMutable();
          exclusionPatterns_.add(index, value);
          onChanged();
        } else {
          exclusionPatternsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public Builder addExclusionPatterns(
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder builderForValue) {
        if (exclusionPatternsBuilder_ == null) {
          ensureExclusionPatternsIsMutable();
          exclusionPatterns_.add(builderForValue.build());
          onChanged();
        } else {
          exclusionPatternsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public Builder addExclusionPatterns(
          int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder builderForValue) {
        if (exclusionPatternsBuilder_ == null) {
          ensureExclusionPatternsIsMutable();
          exclusionPatterns_.add(index, builderForValue.build());
          onChanged();
        } else {
          exclusionPatternsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public Builder addAllExclusionPatterns(
          java.lang.Iterable<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> values) {
        if (exclusionPatternsBuilder_ == null) {
          ensureExclusionPatternsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, exclusionPatterns_);
          onChanged();
        } else {
          exclusionPatternsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public Builder clearExclusionPatterns() {
        if (exclusionPatternsBuilder_ == null) {
          exclusionPatterns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          exclusionPatternsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public Builder removeExclusionPatterns(int index) {
        if (exclusionPatternsBuilder_ == null) {
          ensureExclusionPatternsIsMutable();
          exclusionPatterns_.remove(index);
          onChanged();
        } else {
          exclusionPatternsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder getExclusionPatternsBuilder(
          int index) {
        return getExclusionPatternsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder getExclusionPatternsOrBuilder(
          int index) {
        if (exclusionPatternsBuilder_ == null) {
          return exclusionPatterns_.get(index);  } else {
          return exclusionPatternsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public java.util.List<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> 
           getExclusionPatternsOrBuilderList() {
        if (exclusionPatternsBuilder_ != null) {
          return exclusionPatternsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(exclusionPatterns_);
        }
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder addExclusionPatternsBuilder() {
        return getExclusionPatternsFieldBuilder().addBuilder(
            io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.getDefaultInstance());
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder addExclusionPatternsBuilder(
          int index) {
        return getExclusionPatternsFieldBuilder().addBuilder(
            index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.getDefaultInstance());
      }
      /**
       * <pre>
       * Metrics with names that match a rule in the inclusion_patterns are
       * targeted by this schedule. Metrics that match the exclusion_patterns
       * are not targeted for this schedule, even if they match an inclusion
       * pattern.
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
       */
      public java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder> 
           getExclusionPatternsBuilderList() {
        return getExclusionPatternsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> 
          getExclusionPatternsFieldBuilder() {
        if (exclusionPatternsBuilder_ == null) {
          exclusionPatternsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder>(
                  exclusionPatterns_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          exclusionPatterns_ = null;
        }
        return exclusionPatternsBuilder_;
      }

      private java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> inclusionPatterns_ =
        java.util.Collections.emptyList();
      private void ensureInclusionPatternsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          inclusionPatterns_ = new java.util.ArrayList<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>(inclusionPatterns_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> inclusionPatternsBuilder_;

      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> getInclusionPatternsList() {
        if (inclusionPatternsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inclusionPatterns_);
        } else {
          return inclusionPatternsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public int getInclusionPatternsCount() {
        if (inclusionPatternsBuilder_ == null) {
          return inclusionPatterns_.size();
        } else {
          return inclusionPatternsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern getInclusionPatterns(int index) {
        if (inclusionPatternsBuilder_ == null) {
          return inclusionPatterns_.get(index);
        } else {
          return inclusionPatternsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public Builder setInclusionPatterns(
          int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern value) {
        if (inclusionPatternsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInclusionPatternsIsMutable();
          inclusionPatterns_.set(index, value);
          onChanged();
        } else {
          inclusionPatternsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public Builder setInclusionPatterns(
          int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder builderForValue) {
        if (inclusionPatternsBuilder_ == null) {
          ensureInclusionPatternsIsMutable();
          inclusionPatterns_.set(index, builderForValue.build());
          onChanged();
        } else {
          inclusionPatternsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public Builder addInclusionPatterns(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern value) {
        if (inclusionPatternsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInclusionPatternsIsMutable();
          inclusionPatterns_.add(value);
          onChanged();
        } else {
          inclusionPatternsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public Builder addInclusionPatterns(
          int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern value) {
        if (inclusionPatternsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInclusionPatternsIsMutable();
          inclusionPatterns_.add(index, value);
          onChanged();
        } else {
          inclusionPatternsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public Builder addInclusionPatterns(
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder builderForValue) {
        if (inclusionPatternsBuilder_ == null) {
          ensureInclusionPatternsIsMutable();
          inclusionPatterns_.add(builderForValue.build());
          onChanged();
        } else {
          inclusionPatternsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public Builder addInclusionPatterns(
          int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder builderForValue) {
        if (inclusionPatternsBuilder_ == null) {
          ensureInclusionPatternsIsMutable();
          inclusionPatterns_.add(index, builderForValue.build());
          onChanged();
        } else {
          inclusionPatternsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public Builder addAllInclusionPatterns(
          java.lang.Iterable<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern> values) {
        if (inclusionPatternsBuilder_ == null) {
          ensureInclusionPatternsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inclusionPatterns_);
          onChanged();
        } else {
          inclusionPatternsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public Builder clearInclusionPatterns() {
        if (inclusionPatternsBuilder_ == null) {
          inclusionPatterns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          inclusionPatternsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public Builder removeInclusionPatterns(int index) {
        if (inclusionPatternsBuilder_ == null) {
          ensureInclusionPatternsIsMutable();
          inclusionPatterns_.remove(index);
          onChanged();
        } else {
          inclusionPatternsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder getInclusionPatternsBuilder(
          int index) {
        return getInclusionPatternsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder getInclusionPatternsOrBuilder(
          int index) {
        if (inclusionPatternsBuilder_ == null) {
          return inclusionPatterns_.get(index);  } else {
          return inclusionPatternsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public java.util.List<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> 
           getInclusionPatternsOrBuilderList() {
        if (inclusionPatternsBuilder_ != null) {
          return inclusionPatternsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inclusionPatterns_);
        }
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder addInclusionPatternsBuilder() {
        return getInclusionPatternsFieldBuilder().addBuilder(
            io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.getDefaultInstance());
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder addInclusionPatternsBuilder(
          int index) {
        return getInclusionPatternsFieldBuilder().addBuilder(
            index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.getDefaultInstance());
      }
      /**
       * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
       */
      public java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder> 
           getInclusionPatternsBuilderList() {
        return getInclusionPatternsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder> 
          getInclusionPatternsFieldBuilder() {
        if (inclusionPatternsBuilder_ == null) {
          inclusionPatternsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.Builder, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.PatternOrBuilder>(
                  inclusionPatterns_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          inclusionPatterns_ = null;
        }
        return inclusionPatternsBuilder_;
      }

      private int periodSec_ ;
      /**
       * <pre>
       * Describes the collection period for each metric in seconds.
       * A period of 0 means to not export.
       * </pre>
       *
       * <code>int32 period_sec = 3;</code>
       * @return The periodSec.
       */
      @java.lang.Override
      public int getPeriodSec() {
        return periodSec_;
      }
      /**
       * <pre>
       * Describes the collection period for each metric in seconds.
       * A period of 0 means to not export.
       * </pre>
       *
       * <code>int32 period_sec = 3;</code>
       * @param value The periodSec to set.
       * @return This builder for chaining.
       */
      public Builder setPeriodSec(int value) {
        
        periodSec_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Describes the collection period for each metric in seconds.
       * A period of 0 means to not export.
       * </pre>
       *
       * <code>int32 period_sec = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPeriodSec() {
        
        periodSec_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
    }

    // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
    private static final io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule();
    }

    public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Schedule>
        PARSER = new com.google.protobuf.AbstractParser<Schedule>() {
      @java.lang.Override
      public Schedule parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Schedule(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Schedule> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Schedule> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int FINGERPRINT_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString fingerprint_;
  /**
   * <pre>
   * Optional. The fingerprint associated with this MetricConfigResponse. Each
   * change in configs yields a different fingerprint. The resource SHOULD copy
   * this value to MetricConfigRequest.last_known_fingerprint for the next
   * configuration request. If there are no changes between fingerprint and
   * MetricConfigRequest.last_known_fingerprint, then all other fields besides
   * fingerprint in the response are optional, or the same as the last update if
   * present.
   * The exact mechanics of generating the fingerprint is up to the
   * implementation. However, a fingerprint must be deterministically determined
   * by the configurations -- the same configuration will generate the same
   * fingerprint on any instance of an implementation. Hence using a timestamp is
   * unacceptable, but a deterministic hash is fine.
   * </pre>
   *
   * <code>bytes fingerprint = 1;</code>
   * @return The fingerprint.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getFingerprint() {
    return fingerprint_;
  }

  public static final int SCHEDULES_FIELD_NUMBER = 2;
  private java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule> schedules_;
  /**
   * <pre>
   * A single metric may match multiple schedules. In such cases, the schedule
   * that specifies the smallest period is applied.
   * Note, for optimization purposes, it is recommended to use as few schedules
   * as possible to capture all required metric updates. Where you can be
   * conservative, do take full advantage of the inclusion/exclusion patterns to
   * capture as much of your targeted metrics.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule> getSchedulesList() {
    return schedules_;
  }
  /**
   * <pre>
   * A single metric may match multiple schedules. In such cases, the schedule
   * that specifies the smallest period is applied.
   * Note, for optimization purposes, it is recommended to use as few schedules
   * as possible to capture all required metric updates. Where you can be
   * conservative, do take full advantage of the inclusion/exclusion patterns to
   * capture as much of your targeted metrics.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.ScheduleOrBuilder> 
      getSchedulesOrBuilderList() {
    return schedules_;
  }
  /**
   * <pre>
   * A single metric may match multiple schedules. In such cases, the schedule
   * that specifies the smallest period is applied.
   * Note, for optimization purposes, it is recommended to use as few schedules
   * as possible to capture all required metric updates. Where you can be
   * conservative, do take full advantage of the inclusion/exclusion patterns to
   * capture as much of your targeted metrics.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
   */
  @java.lang.Override
  public int getSchedulesCount() {
    return schedules_.size();
  }
  /**
   * <pre>
   * A single metric may match multiple schedules. In such cases, the schedule
   * that specifies the smallest period is applied.
   * Note, for optimization purposes, it is recommended to use as few schedules
   * as possible to capture all required metric updates. Where you can be
   * conservative, do take full advantage of the inclusion/exclusion patterns to
   * capture as much of your targeted metrics.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule getSchedules(int index) {
    return schedules_.get(index);
  }
  /**
   * <pre>
   * A single metric may match multiple schedules. In such cases, the schedule
   * that specifies the smallest period is applied.
   * Note, for optimization purposes, it is recommended to use as few schedules
   * as possible to capture all required metric updates. Where you can be
   * conservative, do take full advantage of the inclusion/exclusion patterns to
   * capture as much of your targeted metrics.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.ScheduleOrBuilder getSchedulesOrBuilder(
      int index) {
    return schedules_.get(index);
  }

  public static final int SUGGESTED_WAIT_TIME_SEC_FIELD_NUMBER = 3;
  private int suggestedWaitTimeSec_;
  /**
   * <pre>
   * Optional. The client is suggested to wait this long (in seconds) before
   * pinging the configuration service again.
   * </pre>
   *
   * <code>int32 suggested_wait_time_sec = 3;</code>
   * @return The suggestedWaitTimeSec.
   */
  @java.lang.Override
  public int getSuggestedWaitTimeSec() {
    return suggestedWaitTimeSec_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!fingerprint_.isEmpty()) {
      output.writeBytes(1, fingerprint_);
    }
    for (int i = 0; i < schedules_.size(); i++) {
      output.writeMessage(2, schedules_.get(i));
    }
    if (suggestedWaitTimeSec_ != 0) {
      output.writeInt32(3, suggestedWaitTimeSec_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!fingerprint_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, fingerprint_);
    }
    for (int i = 0; i < schedules_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, schedules_.get(i));
    }
    if (suggestedWaitTimeSec_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, suggestedWaitTimeSec_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opentelemetry.proto.metrics.experimental.MetricConfigResponse)) {
      return super.equals(obj);
    }
    io.opentelemetry.proto.metrics.experimental.MetricConfigResponse other = (io.opentelemetry.proto.metrics.experimental.MetricConfigResponse) obj;

    if (!getFingerprint()
        .equals(other.getFingerprint())) return false;
    if (!getSchedulesList()
        .equals(other.getSchedulesList())) return false;
    if (getSuggestedWaitTimeSec()
        != other.getSuggestedWaitTimeSec()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + FINGERPRINT_FIELD_NUMBER;
    hash = (53 * hash) + getFingerprint().hashCode();
    if (getSchedulesCount() > 0) {
      hash = (37 * hash) + SCHEDULES_FIELD_NUMBER;
      hash = (53 * hash) + getSchedulesList().hashCode();
    }
    hash = (37 * hash) + SUGGESTED_WAIT_TIME_SEC_FIELD_NUMBER;
    hash = (53 * hash) + getSuggestedWaitTimeSec();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse)
      io.opentelemetry.proto.metrics.experimental.MetricConfigResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.class, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Builder.class);
    }

    // Construct using io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSchedulesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      fingerprint_ = com.google.protobuf.ByteString.EMPTY;

      if (schedulesBuilder_ == null) {
        schedules_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        schedulesBuilder_.clear();
      }
      suggestedWaitTimeSec_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opentelemetry.proto.metrics.experimental.MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_descriptor;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse getDefaultInstanceForType() {
      return io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.getDefaultInstance();
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse build() {
      io.opentelemetry.proto.metrics.experimental.MetricConfigResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse buildPartial() {
      io.opentelemetry.proto.metrics.experimental.MetricConfigResponse result = new io.opentelemetry.proto.metrics.experimental.MetricConfigResponse(this);
      int from_bitField0_ = bitField0_;
      result.fingerprint_ = fingerprint_;
      if (schedulesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          schedules_ = java.util.Collections.unmodifiableList(schedules_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.schedules_ = schedules_;
      } else {
        result.schedules_ = schedulesBuilder_.build();
      }
      result.suggestedWaitTimeSec_ = suggestedWaitTimeSec_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opentelemetry.proto.metrics.experimental.MetricConfigResponse) {
        return mergeFrom((io.opentelemetry.proto.metrics.experimental.MetricConfigResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse other) {
      if (other == io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.getDefaultInstance()) return this;
      if (other.getFingerprint() != com.google.protobuf.ByteString.EMPTY) {
        setFingerprint(other.getFingerprint());
      }
      if (schedulesBuilder_ == null) {
        if (!other.schedules_.isEmpty()) {
          if (schedules_.isEmpty()) {
            schedules_ = other.schedules_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSchedulesIsMutable();
            schedules_.addAll(other.schedules_);
          }
          onChanged();
        }
      } else {
        if (!other.schedules_.isEmpty()) {
          if (schedulesBuilder_.isEmpty()) {
            schedulesBuilder_.dispose();
            schedulesBuilder_ = null;
            schedules_ = other.schedules_;
            bitField0_ = (bitField0_ & ~0x00000001);
            schedulesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSchedulesFieldBuilder() : null;
          } else {
            schedulesBuilder_.addAllMessages(other.schedules_);
          }
        }
      }
      if (other.getSuggestedWaitTimeSec() != 0) {
        setSuggestedWaitTimeSec(other.getSuggestedWaitTimeSec());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opentelemetry.proto.metrics.experimental.MetricConfigResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opentelemetry.proto.metrics.experimental.MetricConfigResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.ByteString fingerprint_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Optional. The fingerprint associated with this MetricConfigResponse. Each
     * change in configs yields a different fingerprint. The resource SHOULD copy
     * this value to MetricConfigRequest.last_known_fingerprint for the next
     * configuration request. If there are no changes between fingerprint and
     * MetricConfigRequest.last_known_fingerprint, then all other fields besides
     * fingerprint in the response are optional, or the same as the last update if
     * present.
     * The exact mechanics of generating the fingerprint is up to the
     * implementation. However, a fingerprint must be deterministically determined
     * by the configurations -- the same configuration will generate the same
     * fingerprint on any instance of an implementation. Hence using a timestamp is
     * unacceptable, but a deterministic hash is fine.
     * </pre>
     *
     * <code>bytes fingerprint = 1;</code>
     * @return The fingerprint.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getFingerprint() {
      return fingerprint_;
    }
    /**
     * <pre>
     * Optional. The fingerprint associated with this MetricConfigResponse. Each
     * change in configs yields a different fingerprint. The resource SHOULD copy
     * this value to MetricConfigRequest.last_known_fingerprint for the next
     * configuration request. If there are no changes between fingerprint and
     * MetricConfigRequest.last_known_fingerprint, then all other fields besides
     * fingerprint in the response are optional, or the same as the last update if
     * present.
     * The exact mechanics of generating the fingerprint is up to the
     * implementation. However, a fingerprint must be deterministically determined
     * by the configurations -- the same configuration will generate the same
     * fingerprint on any instance of an implementation. Hence using a timestamp is
     * unacceptable, but a deterministic hash is fine.
     * </pre>
     *
     * <code>bytes fingerprint = 1;</code>
     * @param value The fingerprint to set.
     * @return This builder for chaining.
     */
    public Builder setFingerprint(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      fingerprint_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. The fingerprint associated with this MetricConfigResponse. Each
     * change in configs yields a different fingerprint. The resource SHOULD copy
     * this value to MetricConfigRequest.last_known_fingerprint for the next
     * configuration request. If there are no changes between fingerprint and
     * MetricConfigRequest.last_known_fingerprint, then all other fields besides
     * fingerprint in the response are optional, or the same as the last update if
     * present.
     * The exact mechanics of generating the fingerprint is up to the
     * implementation. However, a fingerprint must be deterministically determined
     * by the configurations -- the same configuration will generate the same
     * fingerprint on any instance of an implementation. Hence using a timestamp is
     * unacceptable, but a deterministic hash is fine.
     * </pre>
     *
     * <code>bytes fingerprint = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearFingerprint() {
      
      fingerprint_ = getDefaultInstance().getFingerprint();
      onChanged();
      return this;
    }

    private java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule> schedules_ =
      java.util.Collections.emptyList();
    private void ensureSchedulesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        schedules_ = new java.util.ArrayList<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule>(schedules_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.ScheduleOrBuilder> schedulesBuilder_;

    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule> getSchedulesList() {
      if (schedulesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(schedules_);
      } else {
        return schedulesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public int getSchedulesCount() {
      if (schedulesBuilder_ == null) {
        return schedules_.size();
      } else {
        return schedulesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule getSchedules(int index) {
      if (schedulesBuilder_ == null) {
        return schedules_.get(index);
      } else {
        return schedulesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public Builder setSchedules(
        int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule value) {
      if (schedulesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSchedulesIsMutable();
        schedules_.set(index, value);
        onChanged();
      } else {
        schedulesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public Builder setSchedules(
        int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder builderForValue) {
      if (schedulesBuilder_ == null) {
        ensureSchedulesIsMutable();
        schedules_.set(index, builderForValue.build());
        onChanged();
      } else {
        schedulesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public Builder addSchedules(io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule value) {
      if (schedulesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSchedulesIsMutable();
        schedules_.add(value);
        onChanged();
      } else {
        schedulesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public Builder addSchedules(
        int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule value) {
      if (schedulesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSchedulesIsMutable();
        schedules_.add(index, value);
        onChanged();
      } else {
        schedulesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public Builder addSchedules(
        io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder builderForValue) {
      if (schedulesBuilder_ == null) {
        ensureSchedulesIsMutable();
        schedules_.add(builderForValue.build());
        onChanged();
      } else {
        schedulesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public Builder addSchedules(
        int index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder builderForValue) {
      if (schedulesBuilder_ == null) {
        ensureSchedulesIsMutable();
        schedules_.add(index, builderForValue.build());
        onChanged();
      } else {
        schedulesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public Builder addAllSchedules(
        java.lang.Iterable<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule> values) {
      if (schedulesBuilder_ == null) {
        ensureSchedulesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, schedules_);
        onChanged();
      } else {
        schedulesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public Builder clearSchedules() {
      if (schedulesBuilder_ == null) {
        schedules_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        schedulesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public Builder removeSchedules(int index) {
      if (schedulesBuilder_ == null) {
        ensureSchedulesIsMutable();
        schedules_.remove(index);
        onChanged();
      } else {
        schedulesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder getSchedulesBuilder(
        int index) {
      return getSchedulesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.ScheduleOrBuilder getSchedulesOrBuilder(
        int index) {
      if (schedulesBuilder_ == null) {
        return schedules_.get(index);  } else {
        return schedulesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.ScheduleOrBuilder> 
         getSchedulesOrBuilderList() {
      if (schedulesBuilder_ != null) {
        return schedulesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(schedules_);
      }
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder addSchedulesBuilder() {
      return getSchedulesFieldBuilder().addBuilder(
          io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.getDefaultInstance());
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder addSchedulesBuilder(
        int index) {
      return getSchedulesFieldBuilder().addBuilder(
          index, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.getDefaultInstance());
    }
    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    public java.util.List<io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder> 
         getSchedulesBuilderList() {
      return getSchedulesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.ScheduleOrBuilder> 
        getSchedulesFieldBuilder() {
      if (schedulesBuilder_ == null) {
        schedulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Builder, io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.ScheduleOrBuilder>(
                schedules_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        schedules_ = null;
      }
      return schedulesBuilder_;
    }

    private int suggestedWaitTimeSec_ ;
    /**
     * <pre>
     * Optional. The client is suggested to wait this long (in seconds) before
     * pinging the configuration service again.
     * </pre>
     *
     * <code>int32 suggested_wait_time_sec = 3;</code>
     * @return The suggestedWaitTimeSec.
     */
    @java.lang.Override
    public int getSuggestedWaitTimeSec() {
      return suggestedWaitTimeSec_;
    }
    /**
     * <pre>
     * Optional. The client is suggested to wait this long (in seconds) before
     * pinging the configuration service again.
     * </pre>
     *
     * <code>int32 suggested_wait_time_sec = 3;</code>
     * @param value The suggestedWaitTimeSec to set.
     * @return This builder for chaining.
     */
    public Builder setSuggestedWaitTimeSec(int value) {
      
      suggestedWaitTimeSec_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. The client is suggested to wait this long (in seconds) before
     * pinging the configuration service again.
     * </pre>
     *
     * <code>int32 suggested_wait_time_sec = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSuggestedWaitTimeSec() {
      
      suggestedWaitTimeSec_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse)
  }

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse)
  private static final io.opentelemetry.proto.metrics.experimental.MetricConfigResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opentelemetry.proto.metrics.experimental.MetricConfigResponse();
  }

  public static io.opentelemetry.proto.metrics.experimental.MetricConfigResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MetricConfigResponse>
      PARSER = new com.google.protobuf.AbstractParser<MetricConfigResponse>() {
    @java.lang.Override
    public MetricConfigResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new MetricConfigResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<MetricConfigResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MetricConfigResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opentelemetry.proto.metrics.experimental.MetricConfigResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

