// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

/**
 * <pre>
 * IntExemplar is deprecated. Use Exemplar with as_int for value
 * </pre>
 *
 * Protobuf type {@code opentelemetry.proto.metrics.v1.IntExemplar}
 */
@java.lang.Deprecated public final class IntExemplar extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.v1.IntExemplar)
    IntExemplarOrBuilder {
private static final long serialVersionUID = 0L;
  // Use IntExemplar.newBuilder() to construct.
  private IntExemplar(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private IntExemplar() {
    filteredLabels_ = java.util.Collections.emptyList();
    spanId_ = com.google.protobuf.ByteString.EMPTY;
    traceId_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new IntExemplar();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private IntExemplar(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              filteredLabels_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.StringKeyValue>();
              mutable_bitField0_ |= 0x00000001;
            }
            filteredLabels_.add(
                input.readMessage(io.opentelemetry.proto.common.v1.StringKeyValue.parser(), extensionRegistry));
            break;
          }
          case 17: {

            timeUnixNano_ = input.readFixed64();
            break;
          }
          case 25: {

            value_ = input.readSFixed64();
            break;
          }
          case 34: {

            spanId_ = input.readBytes();
            break;
          }
          case 42: {

            traceId_ = input.readBytes();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        filteredLabels_ = java.util.Collections.unmodifiableList(filteredLabels_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_IntExemplar_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_IntExemplar_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opentelemetry.proto.metrics.v1.IntExemplar.class, io.opentelemetry.proto.metrics.v1.IntExemplar.Builder.class);
  }

  public static final int FILTERED_LABELS_FIELD_NUMBER = 1;
  private java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue> filteredLabels_;
  /**
   * <pre>
   * The set of labels that were filtered out by the aggregator, but recorded
   * alongside the original measurement. Only labels that were filtered out
   * by the aggregator should be included
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
   */
  @java.lang.Override
  public java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue> getFilteredLabelsList() {
    return filteredLabels_;
  }
  /**
   * <pre>
   * The set of labels that were filtered out by the aggregator, but recorded
   * alongside the original measurement. Only labels that were filtered out
   * by the aggregator should be included
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder> 
      getFilteredLabelsOrBuilderList() {
    return filteredLabels_;
  }
  /**
   * <pre>
   * The set of labels that were filtered out by the aggregator, but recorded
   * alongside the original measurement. Only labels that were filtered out
   * by the aggregator should be included
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
   */
  @java.lang.Override
  public int getFilteredLabelsCount() {
    return filteredLabels_.size();
  }
  /**
   * <pre>
   * The set of labels that were filtered out by the aggregator, but recorded
   * alongside the original measurement. Only labels that were filtered out
   * by the aggregator should be included
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.common.v1.StringKeyValue getFilteredLabels(int index) {
    return filteredLabels_.get(index);
  }
  /**
   * <pre>
   * The set of labels that were filtered out by the aggregator, but recorded
   * alongside the original measurement. Only labels that were filtered out
   * by the aggregator should be included
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder getFilteredLabelsOrBuilder(
      int index) {
    return filteredLabels_.get(index);
  }

  public static final int TIME_UNIX_NANO_FIELD_NUMBER = 2;
  private long timeUnixNano_;
  /**
   * <pre>
   * time_unix_nano is the exact time when this exemplar was recorded
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
   * 1970.
   * </pre>
   *
   * <code>fixed64 time_unix_nano = 2;</code>
   * @return The timeUnixNano.
   */
  @java.lang.Override
  public long getTimeUnixNano() {
    return timeUnixNano_;
  }

  public static final int VALUE_FIELD_NUMBER = 3;
  private long value_;
  /**
   * <pre>
   * Numerical int value of the measurement that was recorded.
   * </pre>
   *
   * <code>sfixed64 value = 3;</code>
   * @return The value.
   */
  @java.lang.Override
  public long getValue() {
    return value_;
  }

  public static final int SPAN_ID_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString spanId_;
  /**
   * <pre>
   * (Optional) Span ID of the exemplar trace.
   * span_id may be missing if the measurement is not recorded inside a trace
   * or if the trace is not sampled.
   * </pre>
   *
   * <code>bytes span_id = 4;</code>
   * @return The spanId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getSpanId() {
    return spanId_;
  }

  public static final int TRACE_ID_FIELD_NUMBER = 5;
  private com.google.protobuf.ByteString traceId_;
  /**
   * <pre>
   * (Optional) Trace ID of the exemplar trace.
   * trace_id may be missing if the measurement is not recorded inside a trace
   * or if the trace is not sampled.
   * </pre>
   *
   * <code>bytes trace_id = 5;</code>
   * @return The traceId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getTraceId() {
    return traceId_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < filteredLabels_.size(); i++) {
      output.writeMessage(1, filteredLabels_.get(i));
    }
    if (timeUnixNano_ != 0L) {
      output.writeFixed64(2, timeUnixNano_);
    }
    if (value_ != 0L) {
      output.writeSFixed64(3, value_);
    }
    if (!spanId_.isEmpty()) {
      output.writeBytes(4, spanId_);
    }
    if (!traceId_.isEmpty()) {
      output.writeBytes(5, traceId_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < filteredLabels_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, filteredLabels_.get(i));
    }
    if (timeUnixNano_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed64Size(2, timeUnixNano_);
    }
    if (value_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeSFixed64Size(3, value_);
    }
    if (!spanId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(4, spanId_);
    }
    if (!traceId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(5, traceId_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opentelemetry.proto.metrics.v1.IntExemplar)) {
      return super.equals(obj);
    }
    io.opentelemetry.proto.metrics.v1.IntExemplar other = (io.opentelemetry.proto.metrics.v1.IntExemplar) obj;

    if (!getFilteredLabelsList()
        .equals(other.getFilteredLabelsList())) return false;
    if (getTimeUnixNano()
        != other.getTimeUnixNano()) return false;
    if (getValue()
        != other.getValue()) return false;
    if (!getSpanId()
        .equals(other.getSpanId())) return false;
    if (!getTraceId()
        .equals(other.getTraceId())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getFilteredLabelsCount() > 0) {
      hash = (37 * hash) + FILTERED_LABELS_FIELD_NUMBER;
      hash = (53 * hash) + getFilteredLabelsList().hashCode();
    }
    hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTimeUnixNano());
    hash = (37 * hash) + VALUE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getValue());
    hash = (37 * hash) + SPAN_ID_FIELD_NUMBER;
    hash = (53 * hash) + getSpanId().hashCode();
    hash = (37 * hash) + TRACE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTraceId().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.metrics.v1.IntExemplar parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opentelemetry.proto.metrics.v1.IntExemplar prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * IntExemplar is deprecated. Use Exemplar with as_int for value
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.metrics.v1.IntExemplar}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.v1.IntExemplar)
      io.opentelemetry.proto.metrics.v1.IntExemplarOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_IntExemplar_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_IntExemplar_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opentelemetry.proto.metrics.v1.IntExemplar.class, io.opentelemetry.proto.metrics.v1.IntExemplar.Builder.class);
    }

    // Construct using io.opentelemetry.proto.metrics.v1.IntExemplar.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getFilteredLabelsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (filteredLabelsBuilder_ == null) {
        filteredLabels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        filteredLabelsBuilder_.clear();
      }
      timeUnixNano_ = 0L;

      value_ = 0L;

      spanId_ = com.google.protobuf.ByteString.EMPTY;

      traceId_ = com.google.protobuf.ByteString.EMPTY;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_IntExemplar_descriptor;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.v1.IntExemplar getDefaultInstanceForType() {
      return io.opentelemetry.proto.metrics.v1.IntExemplar.getDefaultInstance();
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.v1.IntExemplar build() {
      io.opentelemetry.proto.metrics.v1.IntExemplar result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.v1.IntExemplar buildPartial() {
      io.opentelemetry.proto.metrics.v1.IntExemplar result = new io.opentelemetry.proto.metrics.v1.IntExemplar(this);
      int from_bitField0_ = bitField0_;
      if (filteredLabelsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          filteredLabels_ = java.util.Collections.unmodifiableList(filteredLabels_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.filteredLabels_ = filteredLabels_;
      } else {
        result.filteredLabels_ = filteredLabelsBuilder_.build();
      }
      result.timeUnixNano_ = timeUnixNano_;
      result.value_ = value_;
      result.spanId_ = spanId_;
      result.traceId_ = traceId_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opentelemetry.proto.metrics.v1.IntExemplar) {
        return mergeFrom((io.opentelemetry.proto.metrics.v1.IntExemplar)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opentelemetry.proto.metrics.v1.IntExemplar other) {
      if (other == io.opentelemetry.proto.metrics.v1.IntExemplar.getDefaultInstance()) return this;
      if (filteredLabelsBuilder_ == null) {
        if (!other.filteredLabels_.isEmpty()) {
          if (filteredLabels_.isEmpty()) {
            filteredLabels_ = other.filteredLabels_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureFilteredLabelsIsMutable();
            filteredLabels_.addAll(other.filteredLabels_);
          }
          onChanged();
        }
      } else {
        if (!other.filteredLabels_.isEmpty()) {
          if (filteredLabelsBuilder_.isEmpty()) {
            filteredLabelsBuilder_.dispose();
            filteredLabelsBuilder_ = null;
            filteredLabels_ = other.filteredLabels_;
            bitField0_ = (bitField0_ & ~0x00000001);
            filteredLabelsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFilteredLabelsFieldBuilder() : null;
          } else {
            filteredLabelsBuilder_.addAllMessages(other.filteredLabels_);
          }
        }
      }
      if (other.getTimeUnixNano() != 0L) {
        setTimeUnixNano(other.getTimeUnixNano());
      }
      if (other.getValue() != 0L) {
        setValue(other.getValue());
      }
      if (other.getSpanId() != com.google.protobuf.ByteString.EMPTY) {
        setSpanId(other.getSpanId());
      }
      if (other.getTraceId() != com.google.protobuf.ByteString.EMPTY) {
        setTraceId(other.getTraceId());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opentelemetry.proto.metrics.v1.IntExemplar parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opentelemetry.proto.metrics.v1.IntExemplar) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue> filteredLabels_ =
      java.util.Collections.emptyList();
    private void ensureFilteredLabelsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        filteredLabels_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.StringKeyValue>(filteredLabels_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.common.v1.StringKeyValue, io.opentelemetry.proto.common.v1.StringKeyValue.Builder, io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder> filteredLabelsBuilder_;

    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue> getFilteredLabelsList() {
      if (filteredLabelsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(filteredLabels_);
      } else {
        return filteredLabelsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public int getFilteredLabelsCount() {
      if (filteredLabelsBuilder_ == null) {
        return filteredLabels_.size();
      } else {
        return filteredLabelsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.StringKeyValue getFilteredLabels(int index) {
      if (filteredLabelsBuilder_ == null) {
        return filteredLabels_.get(index);
      } else {
        return filteredLabelsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public Builder setFilteredLabels(
        int index, io.opentelemetry.proto.common.v1.StringKeyValue value) {
      if (filteredLabelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFilteredLabelsIsMutable();
        filteredLabels_.set(index, value);
        onChanged();
      } else {
        filteredLabelsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public Builder setFilteredLabels(
        int index, io.opentelemetry.proto.common.v1.StringKeyValue.Builder builderForValue) {
      if (filteredLabelsBuilder_ == null) {
        ensureFilteredLabelsIsMutable();
        filteredLabels_.set(index, builderForValue.build());
        onChanged();
      } else {
        filteredLabelsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public Builder addFilteredLabels(io.opentelemetry.proto.common.v1.StringKeyValue value) {
      if (filteredLabelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFilteredLabelsIsMutable();
        filteredLabels_.add(value);
        onChanged();
      } else {
        filteredLabelsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public Builder addFilteredLabels(
        int index, io.opentelemetry.proto.common.v1.StringKeyValue value) {
      if (filteredLabelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFilteredLabelsIsMutable();
        filteredLabels_.add(index, value);
        onChanged();
      } else {
        filteredLabelsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public Builder addFilteredLabels(
        io.opentelemetry.proto.common.v1.StringKeyValue.Builder builderForValue) {
      if (filteredLabelsBuilder_ == null) {
        ensureFilteredLabelsIsMutable();
        filteredLabels_.add(builderForValue.build());
        onChanged();
      } else {
        filteredLabelsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public Builder addFilteredLabels(
        int index, io.opentelemetry.proto.common.v1.StringKeyValue.Builder builderForValue) {
      if (filteredLabelsBuilder_ == null) {
        ensureFilteredLabelsIsMutable();
        filteredLabels_.add(index, builderForValue.build());
        onChanged();
      } else {
        filteredLabelsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public Builder addAllFilteredLabels(
        java.lang.Iterable<? extends io.opentelemetry.proto.common.v1.StringKeyValue> values) {
      if (filteredLabelsBuilder_ == null) {
        ensureFilteredLabelsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, filteredLabels_);
        onChanged();
      } else {
        filteredLabelsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public Builder clearFilteredLabels() {
      if (filteredLabelsBuilder_ == null) {
        filteredLabels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        filteredLabelsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public Builder removeFilteredLabels(int index) {
      if (filteredLabelsBuilder_ == null) {
        ensureFilteredLabelsIsMutable();
        filteredLabels_.remove(index);
        onChanged();
      } else {
        filteredLabelsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.StringKeyValue.Builder getFilteredLabelsBuilder(
        int index) {
      return getFilteredLabelsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder getFilteredLabelsOrBuilder(
        int index) {
      if (filteredLabelsBuilder_ == null) {
        return filteredLabels_.get(index);  } else {
        return filteredLabelsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder> 
         getFilteredLabelsOrBuilderList() {
      if (filteredLabelsBuilder_ != null) {
        return filteredLabelsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(filteredLabels_);
      }
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.StringKeyValue.Builder addFilteredLabelsBuilder() {
      return getFilteredLabelsFieldBuilder().addBuilder(
          io.opentelemetry.proto.common.v1.StringKeyValue.getDefaultInstance());
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.StringKeyValue.Builder addFilteredLabelsBuilder(
        int index) {
      return getFilteredLabelsFieldBuilder().addBuilder(
          index, io.opentelemetry.proto.common.v1.StringKeyValue.getDefaultInstance());
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue.Builder> 
         getFilteredLabelsBuilderList() {
      return getFilteredLabelsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.common.v1.StringKeyValue, io.opentelemetry.proto.common.v1.StringKeyValue.Builder, io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder> 
        getFilteredLabelsFieldBuilder() {
      if (filteredLabelsBuilder_ == null) {
        filteredLabelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.opentelemetry.proto.common.v1.StringKeyValue, io.opentelemetry.proto.common.v1.StringKeyValue.Builder, io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder>(
                filteredLabels_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        filteredLabels_ = null;
      }
      return filteredLabelsBuilder_;
    }

    private long timeUnixNano_ ;
    /**
     * <pre>
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 2;</code>
     * @return The timeUnixNano.
     */
    @java.lang.Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }
    /**
     * <pre>
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 2;</code>
     * @param value The timeUnixNano to set.
     * @return This builder for chaining.
     */
    public Builder setTimeUnixNano(long value) {
      
      timeUnixNano_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimeUnixNano() {
      
      timeUnixNano_ = 0L;
      onChanged();
      return this;
    }

    private long value_ ;
    /**
     * <pre>
     * Numerical int value of the measurement that was recorded.
     * </pre>
     *
     * <code>sfixed64 value = 3;</code>
     * @return The value.
     */
    @java.lang.Override
    public long getValue() {
      return value_;
    }
    /**
     * <pre>
     * Numerical int value of the measurement that was recorded.
     * </pre>
     *
     * <code>sfixed64 value = 3;</code>
     * @param value The value to set.
     * @return This builder for chaining.
     */
    public Builder setValue(long value) {
      
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Numerical int value of the measurement that was recorded.
     * </pre>
     *
     * <code>sfixed64 value = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearValue() {
      
      value_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString spanId_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes span_id = 4;</code>
     * @return The spanId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSpanId() {
      return spanId_;
    }
    /**
     * <pre>
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes span_id = 4;</code>
     * @param value The spanId to set.
     * @return This builder for chaining.
     */
    public Builder setSpanId(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      spanId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes span_id = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearSpanId() {
      
      spanId_ = getDefaultInstance().getSpanId();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString traceId_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes trace_id = 5;</code>
     * @return The traceId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTraceId() {
      return traceId_;
    }
    /**
     * <pre>
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes trace_id = 5;</code>
     * @param value The traceId to set.
     * @return This builder for chaining.
     */
    public Builder setTraceId(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      traceId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes trace_id = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearTraceId() {
      
      traceId_ = getDefaultInstance().getTraceId();
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.v1.IntExemplar)
  }

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntExemplar)
  private static final io.opentelemetry.proto.metrics.v1.IntExemplar DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opentelemetry.proto.metrics.v1.IntExemplar();
  }

  public static io.opentelemetry.proto.metrics.v1.IntExemplar getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<IntExemplar>
      PARSER = new com.google.protobuf.AbstractParser<IntExemplar>() {
    @java.lang.Override
    public IntExemplar parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new IntExemplar(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<IntExemplar> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<IntExemplar> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opentelemetry.proto.metrics.v1.IntExemplar getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

